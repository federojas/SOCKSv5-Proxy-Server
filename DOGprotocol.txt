                        SOCKS Authentication Protocol 

Status of this Memo

   This document specifies an Internet standards track protocol for the
   Internet community, and requests discussion and suggestions for
   improvements.  


Acknowledgments

   This memo describes a protocol that is designed to interact with a Socks5d
   server and obtain metrics from it. It is a session oriented protocol which works 
   over SCTP. 

1.  Introduction

   This protocol is intended to provide tools for a client in order to obtain certain 
   information over a running Socks5d server. The client can make requests asking for 
   the historic amount of connections over the server, the quantity of concurrent connections
   in the server and the quantity of bytes transfered in the server. This protocol does not 
   assure that the metrics are non volatile, meaning that if the server reboots, the statistics 
   may be lost. 
   As this protocol is  session oriented, operations such as adding or deleting user,
   setting a password and ending a connection, are needed.

2.  Initial negotiation
    
   The client establishes a SCTP connection with the server.
   
   Once the connection with the SOCKS V5 server has started, the client
   must send the log in data by producing an Username/Password request:

           +----+------+----------+------+----------+
           |VER | ULEN |  UNAME   | PLEN |  PASSWD  |
           +----+------+----------+------+----------+
           | 1  |  1   | 1 to 255 |  1   | 1 to 255 |
           +----+------+----------+------+----------+
           
   The VER field contains the current version of the subnegotiation,
   which is 0x01.
      o The ULEN field contains the length of the UNAME field that follows.
      o The UNAME field contains the username as known to the source operating system.
      o The PLEN field contains the length of the PASSWD field that follows.
      o The PASSWD field contains the password association with the given UNAME.

   The server verifies the supplied UNAME and PASSWD, and sends the
   following response:
   
                        +----+--------+
                        |VER | STATUS |
                        +----+--------+
                        | 1  |   1    |
                        +----+--------+

   o A STATUS field of 0x00 indicates connection succedeed.
   o A STATUS field of 0x01 indicates connection failed by incorrect user/password
   o A STATUS field of 0x02 indicates an invalid version
   o A STATUS field of 0x03 indicates a server error
  
   In case of failure, the server returns a `failure' (any STATUS value different than X'00')
   status, it MUST close the connection.
   
   In case of succesfull connection (STATUS value X'00'), the session is established.

3.  General request structure

   Once the client is authenticated (and in consequence, the session with the server is established).
   All client request MUST contain the following structure: 
   
                     +------+-----+
                     | TYPE | CMD |
                     +------+-----+
                     |   1  |  1  |
                     +------+-----+
   
   Where TYPE refers to the command type, which can be:
      0x00 for a Query request
      0x01 for a Modification request
      0x02 for Ending connection
   
   and CMD refers to the specific command for each TYPE.

   The associated CMD values for Query requests are the following:
      o  0x00 to get the list of users
      o  0x01 to get the historic amount of connections over the server
      o  0x02 to get the concurrent connections quantity 
      o  0x03 to get the quantity of bytes transfered in the server.
   
   The associated CMD values for Modification request are the following:
      o  0x00 to Add a user 
      o  0x01 to Delete a user 
      o  0x02 to set a new password 
      o  0x03 to set a user admin priviledges
      
   In case of Ending a connection no CMD value is needed.

4.  General response structure
   
   As well as in the general request structure, every server response will contain the 
   a general structure as it follows:

                     +--------+-------+----------+
                     |  TYPE  |  CMD  |  STATUS  |
                     +--------+-------+----------+
                     |   1    |  1    |    1     |
                     +--------+-------+----------+

  In which CMD refers to the command requested, TYPE refers to the type requested and STATUS refers to the request status,
  and its values can be:

      o 0x00 succedeed
      o 0x01 general server failure
      o 0x02 unsupported type
      o 0x03 unsupported command

5.  Query Commands

   5.1   Query Requests  
      
      As specified before, all requests have the same general structure, but specific request
      structures may requier different parameters according to their needs. In particular,
      query request do not require any other parameters.
      
                     +------+-----+
                     | TYPE | CMD |
                     +------+-----+
                     |   1  |  1  |
                     +------+-----+
   
      As reminder, the value of TYPE field for query requests is 0x0 and the CMD value varies
      according which command is needed.

      5.1.1   List of users  
         
         CMD value 0x00. Command used to get a list of all users in the server.


      5.1.2   Quantity of current  connections
         
         CMD value 0x01. Command used quantity of current connections.

      5.1.3   Quantity of bytes transfered  
         
         CMD value 0x02. Command used to get the quantity of bytes transfered in the server.

   5.2   Query Responses

      5.2.1   List of users  
         
         The list of users command returns content within the following structure:

                  +-------+-----+----------+-------+-------------+--------------+
                  |  TYPE | CMD |  STATUS  |  QTY  |     USRS    |   USRS.LEN   |
                  +-------+-----+----------+-------+-------------+--------------+
                  |   1   |  1  |    1     |   1   |  Variable   |   Variable   |
                  +-------+-----+----------+-------+-------------+--------------+

         Where:

         o  TYPE and CMD and STATUS are the values previously specified.
         o  QTY is a 1 byte long unsigned integer related to the amount of users listed.
         o  USRS refers to the user list itself in ASCII charset.
         o  USRS.LEN refers to the user list itself in ASCII charset.


      5.2.2   Quantity of current  connections
   
         The quantity of current connections command returns content within the following structure:

                  +-------+-----+----------+-------+
                  |  TYPE | CMD |  STATUS  |  QTY  |
                  +-------+-----+----------+-------+
                  |   1   |  1  |    1     |   8   |
                  +-------+-----+----------+-------+
         Where:

         o  TYPE and CMD and STATUS are the values previously specified.
         o  QTY is a 8 byte long unsigned integer related to the amount of users listed.


      5.2.3   Quantity of bytes transfered  
   
         The quantity of bytes transfered command returns content within the following structure:

                  +-------+-----+----------+-------+
                  |  TYPE | CMD |  STATUS  |  QTY  |
                  +-------+-----+----------+-------+
                  |   1   |  1  |    1     |   8   |
                  +-------+-----+----------+-------+

         Where:

         o  TYPE and CMD and STATUS are the values previously specified.
         o  QTY is a 8 byte long unsigned integer related to the amount of bytes transfered.

      5.2.4   Historic amount of connections over the server
   
         The historic amount of connections over the server command returns content within the following structure:

                  +-------+-----+----------+-------+
                  |  TYPE | CMD |  STATUS  |  QTY  |
                  +-------+-----+----------+-------+
                  |   1   |  1  |    1     |   8   |
                  +-------+-----+----------+-------+
         
         Where: 

         o  TYPE, CMD and STATUS are the values previously specified.
         o  QTY is a 8 byte long unsigned integer related to the amount of bytes transfered.

6.  Modification Commands

   6.1   Modification Requests  

      6.1.1  Add a User

            To add a user, the following  structure is required:

           +------+----------+------+----------+----------+
           | ULEN |  UNAME   | PLEN |  PASSWD  |   ADMIN  |
           +------+----------+------+----------+----------+
           |  1   | 1 to 255 |  1   | 1 to 255 |    1     |
           +------+----------+------+----------+----------+
      
      Where:
      
         o  ULEN is a 1 byte long unsigned integer refering to the lenght of the UNAME field
         o  UNAME contains the username (must be in ASCII charset).
         o  PLEN field contains a 1 byte long unsigned integer refering to the length of the PASSWD.
         o  PASSWD field contains the password association with the given UNAME (must be in ASCII charset).
         o  ADMIN field contains a 1 byte long unsigned integer refering  to the role of the new user.

            0x00 for normal users
            0x01 for admin users

      6.1.2  Delete User

            To delete a user, the following  structure is required:

           +------+----------+------+----------+----------+
           | ULEN |  UNAME   | PLEN |  PASSWD  |   ADMIN  |
           +------+----------+------+----------+----------+
           |  1   | 1 to 255 |  1   | 1 to 255 |    1     |
           +------+----------+------+----------+----------+

         In which ULEN, UNAME,PLEN, PASSWD and ADMIN are the same fields specified in 6.1.1. 
         It is important to specify that the UNAME value must exist in order to be deleted.
            o In case ADMIN field is 0x00, it means that the user making the request doesn't have 
              admin priviledges, in consecuence, the password must match with the actual password of 
              the UNAME user

            o In case ADMIN field is 0x01, it means that the user making the request do have 
              admin priviledges, in consecuence, the password field will not be evaluated.



      6.1.3  Set new Password

            To set a  new password for a user, the following  structure is required:

           +------+----------+------+----------+------------+------------------+----------+
           | ULEN |  UNAME   | PLEN |  PASSWD  | PLEN.NEW   |     PASSWD.NEW   |   ADMIN  |
           +------+----------+------+----------+------------+------------------+----------+
           |  1   | 1 to 255 |  1   | 1 to 255 |     1      |      1 to 255    |    1     |
           +------+----------+------+----------+------------+------------------+----------+

         In which ULEN, UNAME, PLEN, PASSWD and ADMIN are the same fields specified in 6.1.1. 
         PLEN.NEW and PASSWD.NEW are the same  type as PLEN and PASSWD and contains the new password 
         specifications.
         It is important to specify that the UNAME value must exist in order to be deleted.

            o In case ADMIN field is 0x00, it means that the user making the request doesn't have 
              admin priviledges, in consecuence, the password must match with the actual password of 
              the UNAME user

            o In case ADMIN field is 0x01, it means that the user making the request do have 
              admin priviledges, in consecuence, the password field will not be evaluated.

      6.1.3  Give a user admin priviledges

            To set a  new password for a user, the following  structure is required:

                  +------+----------+------+----------+
                  | ULEN |  UNAME   | PLEN |  PASSWD  |
                  +------+----------+------+----------+
                  |  1   | 1 to 255 |  1   | 1 to 255 |
                  +------+----------+------+----------+

           In which the fields are the same specified in 6.1.1 and in 2.

   6.2   Modification Responses  

         All modification requests have the following response structure:

                  +-------+-----+----------+
                  |  TYPE | CMD |  STATUS  |
                  +-------+-----+----------+
                  |   1   |  1  |    1     |
                  +-------+-----+----------+

         TYPE, CMD values must match the request message sent and STATUS can be:
         
            o 0x00 succedeed
            o 0x01 general server failure
            o 0x02 unsupported type
            o 0x03 unsupported command
